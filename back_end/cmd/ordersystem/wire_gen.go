// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"back_end/internal/entity/interfaces"
	"back_end/internal/infra/database"
	"back_end/internal/infra/web"
	// "internal/usecase"

	"github.com/google/wire"
)

// Injectors from wire.go:

// func NewCreateTaskUseCaseGen(db *sql.DB) *usecase.TaskUseCase {
// 	taskRepository := database.NewTaskRepository(db)
// 	createTaskUseCase := usecase.NewTaskUseCase(taskRepository)
// 	return createTaskUseCase
// }

func NewWebTaskHandlerGen(db *sql.DB) *web.WebTaskHandler{
	taskRepository := database.NewTaskRepository(db)
	webTaskHandler := web.NewTaskHandler(taskRepository)
	return webTaskHandler
}
func NewWebListHandlerGen(db *sql.DB) *web.WebListHandler{
	listNewRepository := database.NewListRepository(db)
	taskRepository := database.NewTaskRepository(db)
	webListHandler := web.NewListHandler(listNewRepository, taskRepository)
	return webListHandler
}
// wire.go:

var setTaskRepositoryDependency = wire.NewSet(database.NewTaskRepository, wire.Bind(new(interfaces.TaskRepositoryInterface), new(*database.TaskRepository)))
var setListRepositoryDependency = wire.NewSet(database.NewListRepository, wire.Bind(new(interfaces.ListRepositoryInterface), new(*database.ListRepository)))
